[Ubuntu note: tests/test_compile.py created so that patch can be tested.
Changes on src/jinja2/compiler.py are applied to jinja2/compiler/py
instead. 
 -- Evan Caville <evan.caville@canonical.com>]
From 56a724644b1ad9cb03745c10cca732715cdc79e9 Mon Sep 17 00:00:00 2001
From: Sigurd Spieckermann <sigurd.spieckermann@gmail.com>
Date: Fri, 26 May 2023 14:32:36 +0200
Subject: [PATCH] fix f-string syntax error in code generation

---
 CHANGES.rst            |  3 +++
 src/jinja2/compiler.py |  7 ++++++-
 tests/test_compile.py  | 19 +++++++++++++++++++
 3 files changed, 28 insertions(+), 1 deletion(-)

--- /dev/null
+++ b/tests/test_compile.py
@@ -0,0 +1,22 @@
+import os
+import re
+
+import pytest
+from jinja2 import UndefinedError
+from jinja2.environment import Environment
+from jinja2.loaders import DictLoader
+
+
+def test_undefined_import_curly_name():
+    env = Environment(
+        loader=DictLoader(
+            {
+                "{bad}": "{% from 'macro' import m %}{{ m() }}",
+                "macro": "",
+            }
+        )
+    )
+    # Must not raise `NameError: 'bad' is not defined`, as that would indicate
+    # that `{bad}` is being interpreted as an f-string. It must be escaped.
+    with pytest.raises(UndefinedError):
+        env.get_template("{bad}").render()
--- a/jinja2/compiler.py
+++ b/jinja2/compiler.py
@@ -989,13 +989,18 @@
                            '%r, missing)' % (frame.symbols.ref(alias), name))
             self.writeline('if %s is missing:' % frame.symbols.ref(alias))
             self.indent()
+            # The position will contain the template name, and will be formatted
+            # into a string that will be compiled into an f-string. Curly braces
+            # in the name must be replaced with escapes so that they will not be
+            # executed as part of the f-string.
+            position = self.position(node).replace("{", "{{").replace("}", "}}")
             self.writeline('%s = undefined(%r %% '
                            'included_template.__name__, '
                            'name=%r)' %
                            (frame.symbols.ref(alias),
                             'the template %%r (imported on %s) does '
                             'not export the requested name %s' % (
-                                self.position(node),
+                                position,
                                 repr(name)
                            ), name))
             self.outdent()
