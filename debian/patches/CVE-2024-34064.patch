From: Nick Galanis <nick.galanis@canonical.com>
Subject: [SECURITY UPDATE] Cross-Site scripting in filters (CVE-2024-34604)
Description:

 Origin: backport, https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb
 Bug: https://github.com/pallets/jinja/security/advisories/GHSA-h75v-3vvj-5mfj

 [Canonical note: Backporting regex to apply in python2]


 From d655030770081e2dfe46f90e27620472a502289d Mon Sep 17 00:00:00 2001
 From: David Lord <davidism@gmail.com>
 Date: Thu, 2 May 2024 09:14:00 -0700
 Subject: [PATCH] disallow invalid characters in keys to xmlattr filter


Index: jinja2-2.10.1/jinja2/filters.py
===================================================================
--- jinja2-2.10.1.orig/jinja2/filters.py
+++ jinja2-2.10.1/jinja2/filters.py
@@ -157,9 +157,9 @@ def do_lower(s):
 
 py_vers = sys.version_info.major
 if py_vers == 3:
-    _space_re = re.compile(r"\s", flags=re.ASCII)
+    _attr_key_re = re.compile(r"[\s/>=]", flags=re.ASCII)
 elif py_vers == 2:
-    _space_re =  re.compile(r'[\t\n\x0B\x0C\r\x20]+')
+    _attr_key_re = re.compile(r'[\t\n\x0B\x0C\r\x20/>=]+')
 
 
 
@@ -195,8 +195,8 @@ def do_xmlattr(_eval_ctx, d, autospace=T
         if value is None or isinstance(value, Undefined):
             continue
 
-        if _space_re.search(key) is not None:
-            raise ValueError("Spaces are not allowed in attributes: '%s'" % key)
+        if _attr_key_re.search(key) is not None:
+            raise ValueError("Invalid character in attribute name: '%s'" % key)
 
         items.append('%s="%s"' % (escape(key), escape(value)))
 
Index: jinja2-2.10.1/tests/test_filters.py
===================================================================
--- jinja2-2.10.1.orig/tests/test_filters.py
+++ jinja2-2.10.1/tests/test_filters.py
@@ -389,11 +389,13 @@ class TestFilter(object):
         assert 'bar="23"' in out
         assert 'blub:blub="&lt;?&gt;"' in out
 
-    def test_xmlattr_key_with_spaces(self, env):
-        with pytest.raises(ValueError, match="Spaces are not allowed"):
-            env.from_string(
-                "{{ {'src=1 onerror=alert(1)': 'my_class'}|xmlattr }}"
-            ).render()
+    @pytest.mark.parametrize("sep", ("\t", "\n", "\f", " ", "/", ">", "="))
+    def test_xmlattr_key_invalid(self, env, sep):
+        with pytest.raises(ValueError) as excinfo:
+            env.from_string("{{ {key: 'my_class'}|xmlattr }}").render(
+                key="class{}onclick=alert(1)".format(sep)
+            )
+        assert "Invalid character" in str(excinfo.value)
 
     def test_sort1(self, env):
         tmpl = env.from_string(
